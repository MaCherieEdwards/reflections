How did viewing a diff between two versions of a file help you see the bug that was introduced?

It prevented me from having to analyze the two files side by side, line by line.
It filtered out all of the code that was the same, which saved me time by allowing me to analyze only the differences between the two files.It placed code from two separate files into the same document so I could scan the differences within the same window.

How could having easy access to the entire history of a file make you a more efficient programmer in the long term?

Having easy access to the entire history of a file would allow you to easily compare versions and identify bugs through version control. 
If you were working on a particularly large project with thousands of lines of code, it could take weeks to identify minor changes between versions. 
If you over-rode a previous version with code that caused a new bug in the system, you would have to rely on your memory of what changed without the ability to view previous versions. 

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google docs does?

The pros of manually choosing when to create a commit:
Code is saved in logical chunks, preventing compiling errors and bugs.
Bugs are easier to identify when viewing diffs between commits. 

Cons of manually choosing when to create a commit:
You may forget to create a commit, leading to commits that are too large and make it difficult to compare different versions of your file.
You may commit too often, create additional work for anyone who'd like to compare versions of your file.

Pros of having versions automatically saved:
You'd have a steady back up of your work.
Your progress is still saved if you forget to save a commit for a long period of time. 

Cons of having versions automatically saved:
This would create multiple commits, most of which would be at illogical places to save your progress. 
Bugs would be harder to identify, as the majority of commits would contain unfinished code blocks. 

Why do you think some version control systems, like GIt, allow saving multiple files in one commit, while others, like Google Docs, treat each file seperately?

I think the difference between these two methods relates to the common use cases for each version control system. 
Most users of Google Docs are working on single documents where a change to one document's content prevents another document's content from being used or read. 
Git's major use case is for code, which is almost always structured based on the relationship between one file and another. 

How can you use the commands git log and git diff to view the history of files?

You can use git log to view a history/log of all commits that have been made of a single file, and read the commit messages to get a general idea of what has changed from one version to the next. 
You can use git diff to get a more detailed understanding of what has changed from one commit to another. 
Git diff allows you to view what lines of code were added and deleted from one commit to another. 

How might using version control make you more confident to make changes that could break something. 
Version control gives you peace of mind and the confidence to make changes that could break functionatliy, because you can easily locate where a bug was introduced. 
Commands like git log, git diff, and git checkout make it easy to determine when and how a bug was introduced. 

Now that you have your workspace set up, what do you want to try using Git for?
I'm excited to use Git for my upcoming projects for the Udacity Front-End Web Development Nanadegree!